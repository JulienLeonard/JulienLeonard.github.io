function drawcircle(a,b,c,d){var e=a.coordindex;a.coords[e+0]=b-2*d;a.coords[e+1]=c-d;a.coords[e+2]=b;a.coords[e+3]=c;a.coords[e+4]=d;e+=5;a.coords[e+0]=b+2*d;a.coords[e+1]=c-d;a.coords[e+2]=b;a.coords[e+3]=c;a.coords[e+4]=d;e+=5;a.coords[e+0]=b;a.coords[e+1]=c+2*d;a.coords[e+2]=b;a.coords[e+3]=c;a.coords[e+4]=d;a.coordindex=e+5;a.nnewcircles+=1}
function computeViewPortMatrix(a,b){var c=b[0],d=b[1],e=b[2],h=b[3],k=e-c;b=h-d;a=a.canvasratio;var f=2/k,g=2/b;c=-((c+e)/2)*f;1>a&&(c+=k/2*f*(a-1));d=-((d+h)/2)*g;1<a&&(d+=b/2*g*(1-1/a));f!=g&&console.log("ERROR: scale x",f,"!= scaley",g);return new Float32Array([f,0,0,0,0,f,0,0,0,0,1,0,c,d,0,1])}
function computeScreenPortMatrix(a,b){var c=b[0],d=b[1],e=b[2],h=b[3],k=e-c;b=h-d;var f=a.canvasratio,g=a.canvaswidth/k,l=a.canvasheight/b;c=a.canvaswidth/2-(c+e)/2*g;1>f&&(c+=k/2*g*(f-1));a=a.canvasheight/2-(d+h)/2*l;1<f&&(a+=b/2*l*(1-1/f));return new Float32Array([g,0,0,0,0,l,0,0,0,0,1,0,c,a,0,1])}
function initcanvas(a){document.getElementById(a).innerHTML='<canvas id = "canvas'+a+'"  />';canvas=document.getElementById("canvas"+a);canvas.width=2E3;canvas.height=2E3;if(gl=getWebGLContext(canvas))vertexShader=loadShader(gl,"attribute vec2  aVertexPosition;\nattribute vec3  aCircleDef;\nuniform   mat4  uModelViewMatrix;\nuniform   mat4  uScreenViewMatrix;\nuniform   float uAlpha;\nvarying   vec2  vCircleCenter;\nvarying   float vCircleRadius;\nvarying   float vAlpha;\nvoid main(void) {\n   gl_Position  = uModelViewMatrix * vec4(aVertexPosition, 0.0, 1.0);\n   vCircleCenter   = vec2(uScreenViewMatrix * vec4(aCircleDef[0], aCircleDef[1], 0.0,1.0));\n   vCircleRadius   = uScreenViewMatrix[0][0] * aCircleDef[2];\n   vAlpha          = uAlpha;\n}",
gl.VERTEX_SHADER),fragmentShader=loadShader(gl,"#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision mediump float;\nvarying vec2  vCircleCenter;\nvarying float vCircleRadius;\nvarying float vAlpha;\nvoid main(void) {\nvec2 cxy = vec2(gl_FragCoord) + vec2(0.5,0.5) - vCircleCenter;\nfloat alpha = 1.0;\nfloat r =  (dot(cxy, cxy))/(vCircleRadius * vCircleRadius);\n#ifdef GL_OES_standard_derivatives\n float delta = fwidth(r);\n alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n#endif\n   gl_FragColor = vec4(0.0,0.0,0.0,1.0) * alpha * vAlpha;\n}",
gl.FRAGMENT_SHADER),program=createProgram(gl,[vertexShader,fragmentShader]),gl.useProgram(program),gl.canvaswidth=2E3,gl.canvasheight=2E3,gl.modelviewmatrixloc=gl.getUniformLocation(program,"uModelViewMatrix"),gl.alpha=gl.getUniformLocation(program,"uAlpha"),gl.screenviewmatrixloc=gl.getUniformLocation(program,"uScreenViewMatrix"),gl.vertexposloc=gl.getAttribLocation(program,"aVertexPosition"),gl.circledef=gl.getAttribLocation(program,"aCircleDef"),gl.enableVertexAttribArray(gl.vertexposloc),gl.enableVertexAttribArray(gl.circledef),
gl.batchs=[],gl.viewbox0=[-1,-1,1,1],a=function(){var a=window.innerWidth/window.innerHeight;console.log("canvas.innerWidth",window.innerWidth,"canvas.innerHeight",window.innerHeight);gl.canvasratio=a;gl.viewport(0,0,gl.canvaswidth,gl.canvasheight);resetviewbox(gl)},window.onresize=a,a()}
function createnewbatch(a){var b={};b.bcoords=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,b.bcoords);a.bufferData(a.ARRAY_BUFFER,new Float32Array(a.coords),a.STATIC_DRAW);b.ncircles=a.nnewcircles;b.alpha=0;return b}function redrawbatch(a,b){a.bindBuffer(a.ARRAY_BUFFER,b.bcoords);a.vertexAttribPointer(a.vertexposloc,2,a.FLOAT,!1,20,0);a.vertexAttribPointer(a.circledef,3,a.FLOAT,!1,20,8);a.drawArrays(a.TRIANGLES,0,3*b.ncircles);b.alpha+=.05}
function resetviewbox(a){a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);a.blendFunc(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA);a.enable(a.BLEND);a.disable(a.DEPTH_TEST);var b=computeViewPortMatrix(a,a.viewbox0);a.uniformMatrix4fv(a.modelviewmatrixloc,!1,b);b=computeScreenPortMatrix(a,a.viewbox0);a.uniformMatrix4fv(a.screenviewmatrixloc,!1,b);for(var c=b=0;c<a.batchs.length;c++){var d=a.batchs[c];a.uniform1f(a.alpha,1>d.alpha?d.alpha:1);redrawbatch(a,d);b+=d.ncircles}console.log("ncircles",b)}
function startanim(a){requestAnimFrame(a)}function relaunchloop(a,b){a&&requestAnimFrame(b)}function bindcanvas(a,b,c,d){}function myhsla(a,b,c,d){return(new Color).hsla(a,b,c,d)};
